//Jessy's Customer Stuff
//Author: Jessy Perreault
//Course Name: PROJ-207-OOS-Threaded-Project
//Date: November 2020

// http://127.0.0.1:8081/TravelExpertsOOSDJSP/rs/agent/getcustomers
					@GET
					@Path("/getcustomers")
					@Produces(MediaType.APPLICATION_JSON)
					public String getCustomers()
					{
						EntityManagerFactory factory = Persistence.createEntityManagerFactory("TravelExpertsOOSDJSP2");
						EntityManager em = factory.createEntityManager();
						
						Query query = em.createQuery("select c from Customer c");
						List<Customer> list = query.getResultList();
						
						Gson gson = new Gson();
						Type type = new TypeToken<List<Customer>>() {}.getType();
						
						return gson.toJson(list, type);
					}
					
////				// http://127.0.0.1:8081/TravelExpertsOOSDJSP/rs/agent/getcustomer/
					@GET
					@Path("/getcustomer/{customerId}")
					@Produces(MediaType.APPLICATION_JSON)
					public String getCustomer(@PathParam("customerId") int customerId)
					{
						EntityManagerFactory factory = Persistence.createEntityManagerFactory("TravelExpertsOOSDJSP2");
						EntityManager em = factory.createEntityManager();
						
						Customer foundCustomer = em.find(Customer.class, customerId);
						
						Gson gson = new Gson();
						
						em.close();
						
						return gson.toJson(foundCustomer);
					}
					
					// http://127.0.0.1:8081/TravelExpertsOOSDJSP/rs/agent/getcustomerlist
					//sends back customer id, firstname, lastname to populate a dropdown list 
					@GET
					@Path("/getcustomerlist/{ id }")
					@Produces(MediaType.APPLICATION_JSON)
					public String getCustomerList(@PathParam("id") int custId)
					{
						EntityManagerFactory factory = Persistence.createEntityManagerFactory("TravelExpertsOOSDJSP2");
						EntityManager em = factory.createEntityManager();
						
						Query query = em.createQuery("select c from Customer c where c.customerId = '" + custId + "'");
						List<Customer> list = query.getResultList();
						JsonArray jsonCustomerArray = new JsonArray();
						for (int i=0; i<list.size(); i++)
						{
							Customer c = list.get(i);
							JsonObject obj = new JsonObject();
							obj.addProperty("CustomerId", c.getCustomerId());
							obj.addProperty("CustFirstName", c.getCustFirstName());
							obj.addProperty("CustLastName", c.getCustLastName());
							obj.addProperty("CustAddress", c.getCustAddress());
							obj.addProperty("CustCity", c.getCustCity());
							obj.addProperty("CustProv", c.getCustProv());
							obj.addProperty("CustPostal", c.getCustPostal());
							obj.addProperty("CustCountry", c.getCustCountry());
							obj.addProperty("CustHomePhone", c.getCustHomePhone());
							obj.addProperty("CustBusPhone", c.getCustBusPhone());
							obj.addProperty("CustEmail", c.getCustEmail());
							obj.addProperty("AgentId", c.getAgentId());
							obj.addProperty("Password", c.getPassword());
							jsonCustomerArray.add(obj);
						}
						
						return jsonCustomerArray.toString();
					}
					
					@POST
					@Path("/postcustomer/")
				    @Produces(MediaType.TEXT_PLAIN)
					@Consumes(MediaType.APPLICATION_JSON)
					public String postCustomer(String jsonString) {
						EntityManagerFactory factory 
							= Persistence.createEntityManagerFactory("TravelExpertsOOSDJSP2");
						EntityManager em = factory.createEntityManager();
						Gson gson = new Gson();
						Type type = new TypeToken<Customer>() {}.getType();
						System.out.println(jsonString);
						Customer customer = gson.fromJson(jsonString, type);
						em.getTransaction().begin();
						Customer newCustomer = em.merge(customer);
						em.getTransaction().commit();
						em.close();
						factory.close();
						
						return "{​​'message':'Customer was updated'}​​";
					}
					
					
					
					
					
------- EHSANS STUFF

	// http://localhost:8081/OOSDTravelExperts/rs/agent/getcc/123
	@GET
	@Path("/getcc/{ customerid }")
	@Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)
	public String getCustomer(@PathParam("customerid") int customerId)
	{
		EntityManagerFactory factory = Persistence.createEntityManagerFactory("OOSDTravelExperts");
		EntityManager em = factory.createEntityManager();
		
		Query query = em.createQuery("Select c from Creditcard c where c.customerId=" + customerId);
		List<Creditcard> list = query.getResultList();
		
		Gson gson = new Gson();
	
		Type type = new TypeToken<List<Creditcard>>() {}.getType();
		
		return gson.toJson(list,type);
	}



----------------------------Crystal's stuff

		//localhost:8080/TravelExpertsOOSDJSP/rs/packagesalberta/loginId                       //GETS CUSTOMER INFORMATION BASED ON ID - I dont think we use this
		@GET
		@Path("/loginId/{id}")
		@Produces(MediaType.APPLICATION_JSON)
		public String getAgentLoginEmail(@PathParam("id") int custId)
		{
			EntityManagerFactory factory = Persistence.createEntityManagerFactory("TravelExpertsOOSDJSP");
			EntityManager em = factory.createEntityManager();
			
//			Query query = em.createQuery("select c from Customer c where c.CustFirstName = "+ validEmail);
			Customer foundcustomer = em.find(Customer.class, custId);
			
			Gson gson = new Gson();
			em.close();
			
			return gson.toJson(foundcustomer);
		}
		
		//localhost:8081/TravelExpertsOOSDJSP/rs/packagesalberta/LoginEmail/{validEmail}           // crystal - used for the login page
		@GET
		@Path("/LoginEmail/{custEmail}")
		@Produces(MediaType.APPLICATION_JSON)
		public String getCustomerList(@PathParam("custEmail") String custEmail)
		{
			EntityManagerFactory factory = Persistence.createEntityManagerFactory("TravelExpertsOOSDJSP");
			EntityManager em = factory.createEntityManager();
			
			Query query = em.createQuery("select p from Customer p where p.custEmail = '" + custEmail + "'");
			List<Customer> list = query.getResultList();
			JsonArray jsonCustomerArray = new JsonArray();
			for (int i=0; i<list.size(); i++)
			{
				Customer p = list.get(i);
				JsonObject obj = new JsonObject();
				obj.addProperty("CustomerId", p.getCustomerId());
				obj.addProperty("custEmail", p.getCustEmail());
				obj.addProperty("Password", p.getPassword());
				jsonCustomerArray.add(obj);
			}
			
			return jsonCustomerArray.toString();
		}
		
		
																											//crystal - used for the registration page
		@PUT
	    @Path("/putcustomer/")
	    @Consumes(MediaType.APPLICATION_JSON)
	    @Produces(MediaType.APPLICATION_JSON)
	    public String putAgent(String jsonString)
	    {
	        //localhost:8080/TravelExpertsOOSDJSP/rs/packagesalberta/putcustomer/
	        EntityManagerFactory factory = Persistence.createEntityManagerFactory("TravelExpertsOOSDJSP");
	        EntityManager em = factory.createEntityManager();
	        Gson gson = new Gson();
	        Customer customer = gson.fromJson(jsonString, Customer.class);
	        em.getTransaction().begin();
	        em.persist(customer);
	        em.getTransaction().commit();
	        em.close();
	        return "{ 'message':'Inserted' }";
	    }
		
		
		//Doug's calls 
		//This is for the get package by Id
		
		// http://localhost:8081/TravelExpertsOOSDJSP/rs/packagesalberta/getpackage/5
		@GET
		@Path("/getpackage/{ packageId }")
		@Produces(MediaType.APPLICATION_JSON)
		public String getPackage(@PathParam("packageId") int packageId)
		{
			EntityManagerFactory factory = Persistence.createEntityManagerFactory("TravelExpertsOOSDJSP");
			EntityManager em = factory.createEntityManager();
			
			Packagesalberta foundpackage = em.find(Packagesalberta.class, packageId);
			
			Gson gson = new Gson();
			
			em.close();
			
			return gson.toJson(foundpackage);
		}
		
		//this is the call that gets all the packages
		
		//localhost:8081/TravelExpertsOOSDJSP/rs/packagesalberta/getpackagelist
		@GET
		@Path("/getpackagelist")
		@Produces(MediaType.APPLICATION_JSON)
		public String getPackageList()
		{
			EntityManagerFactory factory = Persistence.createEntityManagerFactory("TravelExpertsOOSDJSP");
			EntityManager em = factory.createEntityManager();
			
			Query query = em.createQuery("select p from Packagesalberta p");
			List<Packagesalberta> list = query.getResultList();
			JsonArray jsonAgentArray = new JsonArray();
			for (int i=0; i<list.size(); i++)
			{
				Packagesalberta p = list.get(i);
				JsonObject obj = new JsonObject();
				obj.addProperty("PackageId", p.getPackageId());
				obj.addProperty("PkgName", p.getPkgName());
				obj.addProperty("PkgImageMain", p.getPkgImageMain());
				jsonAgentArray.add(obj);
			}
			
			return jsonAgentArray.toString();
		}
